@namespace Skclusive.Material.Text
@inherits MaterialComponentBase

<FormControl
    RootRef="@RootRef"
    Class="@_Class"
    Style="@_Style"
    FullWidth="@FullWidth"
    Error="@Error"
    Focused="@Focused"
    Disabled="@Disabled"
    Required="@Required"
    HiddenLabel="@HiddenLabel"
    Variant="@_Variant"
    Margin="@Margin"
    @attributes="Attributes">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <InputLabel
            RootRef="@LabelRef"
            For="@Id"
            Disabled="@Disabled"
            Shrink="@_Shrink"
            Variant="@_Variant"
            Context="InputLabelContext">
            @Label
        </InputLabel>
    }
    @if (Variant == TextFieldVariant.Filled)
    {
        <FilledInput
            RootRef="@InputRef"
            Disabled="@Disabled"
            Id="@Id"
            Type="@Type"
            Name="@Name"
            Value="@Value"
            Focused="@Focused"
            Rows="@Rows"
            RowsMax="@RowsMax"
            MaxLength="@MaxLength"
            FullWidth="@FullWidth"
            AutoFocus="@AutoFocus"
            Multiline="@Multiline"
            PlaceHolder="@PlaceHolder"
            AutoComplete="@AutoComplete"
            DefaultValue="@DefaultValue"
            ReadOnly="@ReadOnly"
            OnFocus="@HandleFocus"
            OnBlur="@HandleBlur"
            HasStartAdornment="@HasStartAdornment"
            HasEndAdornment="@HasEndAdornment"
            OnChange="@HandleChange">
            <StartAdornment>
                @StartAdornment
            </StartAdornment>
            <EndAdornment>
                @EndAdornment
            </EndAdornment>
        </FilledInput>
    }
    else if (Variant == TextFieldVariant.Outlined)
    {
        <OutlinedInput
            RootRef="@InputRef"
            Disabled="@Disabled"
            Id="@Id"
            Notched="@_Shrink"
            LabelWidth="@LabelWidth"
            Type="@Type"
            Name="@Name"
            Value="@Value"
            Focused="@Focused"
            Rows="@Rows"
            RowsMax="@RowsMax"
            MaxLength="@MaxLength"
            FullWidth="@FullWidth"
            AutoFocus="@AutoFocus"
            Multiline="@Multiline"
            PlaceHolder="@PlaceHolder"
            AutoComplete="@AutoComplete"
            DefaultValue="@DefaultValue"
            ReadOnly="@ReadOnly"
            OnFocus="@HandleFocus"
            OnBlur="@HandleBlur"
            HasStartAdornment="@HasStartAdornment"
            HasEndAdornment="@HasEndAdornment"
            OnChange="@HandleChange">
            <StartAdornment>
                @StartAdornment
            </StartAdornment>
            <EndAdornment>
                @EndAdornment
            </EndAdornment>
        </OutlinedInput>
    }
    else
    {
        <TextInput
            RootRef="@InputRef"
            Disabled="@Disabled"
            Id="@Id"
            Type="@Type"
            Name="@Name"
            Value="@Value"
            Focused="@Focused"
            Rows="@Rows"
            RowsMax="@RowsMax"
            MaxLength="@MaxLength"
            FullWidth="@FullWidth"
            AutoFocus="@AutoFocus"
            Multiline="@Multiline"
            PlaceHolder="@PlaceHolder"
            AutoComplete="@AutoComplete"
            DefaultValue="@DefaultValue"
            ReadOnly="@ReadOnly"
            OnFocus="@HandleFocus"
            OnBlur="@HandleBlur"
            HasStartAdornment="@HasStartAdornment"
            HasEndAdornment="@HasEndAdornment"
            OnChange="@HandleChange">
            <StartAdornment>
                @StartAdornment
            </StartAdornment>
            <EndAdornment>
                @EndAdornment
            </EndAdornment>
        </TextInput>
    }
    @if (!string.IsNullOrWhiteSpace(Helper))
    {
        <FormHelperText
            Disabled="@Disabled"
            Id="@HelperId"
            Variant="@_Variant"
            Context="HelperContext">
            @Helper
        </FormHelperText>
    }
</FormControl>
